global
    log stdout  format raw  local0  info
defaults
    mode http
    log global
    option http-server-close
    option httplog
    option dontlognull
    option redispatch
    option forwardfor
    retries 3
    backlog 4096
    timeout client          1m
    timeout client-fin      30s
    timeout connect         5s
    timeout server          30s
    timeout tunnel          15m
    timeout http-keep-alive 15s
    timeout http-request    10s
    timeout queue           5s
    timeout tarpit          60s
    default-server inter 3s rise 2 fall 3

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "backend" }}
    {{/* Get the VIRTUAL_PROTO defined by container */}}
    {{ $proto := trim (or .Container.Env.VIRTUAL_PROTO "http") }}
    {{ $bk_ssl := when (eq $proto "https") "ssl" "" }}
    {{ if .Address }}
        {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
        {{ if and .Container.Node.ID .Address.HostPort }}
            # {{ .Container.Node.Name }}/{{ .Container.Name }}
            server {{.Container.Name}} {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }} cookie {{.Container.Name}} check {{ $bk_ssl }}
        {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
        {{ else if .Network }}
            # {{ .Container.Name }}
            server {{ .Container.Name }} {{ .Network.IP }}:{{ .Address.Port }} cookie {{.Container.Name}} check {{ $bk_ssl }}
        {{ end }}
    {{ else if .Network }}
        # {{ .Container.Name }}
        {{ if .Network.IP }}
            server {{ .Container.Name }} {{ .Network.IP }}:80 disabled
        {{ end }}
    {{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $host := trim $host }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $is_suffix := hasPrefix "*" $host }}
{{ $is_prefix := hasSuffix "*" $host }}
{{ $host_name := when $is_regexp (sha1 $host) (when $is_suffix (replace $host ".*" "" 1) (when $is_prefix (replace $host ".*" "" 1) $host)) }}

# {{ $host_name }}
{{/* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external" */}}
{{ $network_tag := or (first (groupByKeys $containers "Env.NETWORK_ACCESS")) "external" }}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) "redirect" }}

{{/* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000" */}}
{{ $hsts := or (first (groupByKeys $containers "Env.HSTS")) "max-age=31536000" }}

{{/* Get the CONNECTION defined by containers w/ the same vhost, falling back to "server-close" */}}
{{ $connection := or (first (groupByKeys $containers "Env.CONNECTION")) "server-close" }}

backend bk_{{ $host_name }}
    {{ if eq $network_tag "internal" }}
    # Only allow traffic from internal clients
    acl internal_net_1 src 10.0.0.0/8
    acl internal_net_2 src 192.168.0.0/16
    acl internal_net_3 src 172.16.0.0/12
    http-request deny unless LOCALHOST || internal_net_1 || internal_net_2 || internal_net_3
    {{ end }}

    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-Ssl off if !{ ssl_fc }
    http-request set-header X-Forwarded-Ssl on if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request del-header Proxy

    {{ if (and (ne $https_method "noredirect") (ne $hsts "off")) }}
    http-response set-header Strict-Transport-Security "{{ trim $hsts }}"
    {{ end }}

    {{ if (eq $connection "keep-alive") }}
    # Keep-alive to backend service
    option http-keep-alive
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 1m
    {{ else if (eq $connection "tunnel") }}
    option http-tunnel
    {{ else if (eq $connection "close") }}
    option httpclose
    timeout client          15m
    timeout client-fin      10s
    timeout server          15m
    timeout http-keep-alive 15m
    {{ end }}

    balance roundrobin
    {{ range $container := $containers }}
        {{ $addrLen := len $container.Addresses }}

        {{ range $knownNetwork := $CurrentContainer.Networks }}
            {{ range $containerNetwork := $container.Networks }}
                {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
                ## Can be connected with "{{ $containerNetwork.Name }}" network
                    {{/* If only 1 port exposed, use that */}}
                    {{ if eq $addrLen 1 }}
                        {{ $address := index $container.Addresses 0 }}
                        {{ template "backend" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
                    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
                    {{ else }}
                        {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
                        {{ $address := where $container.Addresses "Port" $port | first }}
                        {{ template "backend" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
                    {{ end }}
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}

{{ end }}
{{/* end range */}}

{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}

frontend http
    mode http
    {{ if $enable_ipv6 }}
    bind :::80 v4v6 tfo defer-accept
    {{ else }}
    bind :80 tfo defer-accept
    {{ end }}
    acl http  ssl_fc,not
    acl https ssl_fc
    acl safe_method method GET HEADER CONNECT OPTIONS TRACE
    http-request deny deny_status 425 if { ssl_fc_has_early } !safe_method

    {{/* Get Default Host setting from environment */}}
    {{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
    {{ $default_host := trim $default_host }}

    {{/* Per host setting */}}
    {{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
    {{ $host := trim $host }}
    {{ $is_regexp := hasPrefix "~" $host }}
    {{ $is_suffix := hasPrefix "*" $host }}
    {{ $is_prefix := hasSuffix "*" $host }}
    {{ $host_name := when $is_regexp (sha1 $host) (when $is_suffix (replace $host "*" "." 1) (when $is_prefix (replace $host ".*" "" 1) $host)) }}
    # {{ $host_name }}

    {{ if eq $host $default_host }}
    ## Default host
    default_backend bk_{{ $host_name }}
    {{ end }}
    {{ $host := trimSuffix "*" $host }}

    {{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
    {{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) "redirect" }}
    {{/* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000" */}}
    {{ $hsts := or (first (groupByKeys $containers "Env.HSTS")) "max-age=31536000" }}
    {{/* Get the first cert name defined by containers w/ the same vhost */}}
    {{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}
    {{/* Get the best matching cert  by name for the vhost. */}}
    {{ $vhostCert := (closest (dir "/etc/haproxy/certs") (printf "%s.pem" $host))}}
    {{/* Use the cert specified on the container or fallback to the best vhost match */}}
    {{ $cert := (coalesce $certName $vhostCert) }}
    {{ $certExist := or (exists (printf "/etc/haproxy/certs/%s" $cert)) (exists (printf "/etc/haproxy/certs/%s.ecdsa" $cert)) (exists (printf "/etc/haproxy/certs/%s.rsa" $cert)) (exists (printf "/etc/haproxy/certs/%s.dsa" $cert)) }}
    {{ $is_https := (and (ne $https_method "nohttps") (ne $cert "") $certExist ) }}

    {{/* Create host matcher */}}
    {{ if $is_regexp }}
    acl host_{{ $host_name }} hdr_reg(Host) -i {{ trimPrefix "~" $host }}
    {{ if $is_https }}
    acl host_{{ $host_name }}_sni ssl_fc_sni_reg -i {{ trimPrefix "~" $host }}
    {{ end }}
    {{ else if $is_suffix }}
    acl host_{{ $host_name }} hdr_end(Host) -i {{ trimPrefix "*" $host }}
    {{ if $is_https }}
    acl host_{{ $host_name }}_sni ssl_fc_sni_end -i {{ trimPrefix "*" $host }}
    {{ end }}
    {{ else if $is_prefix }}
    acl host_{{ $host_name }} hdr_beg(Host) -i {{ trimSuffix "*" $host }}
    {{ if $is_https }}
    acl host_{{ $host_name }}_sni ssl_fc_sni_beg -i {{ trimSuffix "*" $host }}
    {{ end }}
    {{ else }}
    acl host_{{ $host_name }} hdr(Host) -i {{ $host }}
    {{ if $is_https }}
    acl host_{{ $host_name }}_sni ssl_fc_sni -i {{ $host }}
    {{ end }}
    {{ end }}

    {{ if $is_https }}
    ## https
    use_backend bk_{{$host_name}} if https host_{{$host_name}}_sni
    {{ end }}
    ## http
    {{ if and $is_https (eq $https_method "redirect") }}
    redirect scheme https code 301 if http host_{{$host_name}}
    {{ else if or (not $is_https) (eq $https_method "noredirect") }}
    use_backend bk_{{$host_name}} if http host_{{$host_name}}
    {{ end }}
    {{ end }}
    {{/* end range */}}
